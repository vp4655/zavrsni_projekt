temp
temp = rep(0, nrow(results_amb))
for(j in 1:nrow(results_amb)){
if(results_amb[j] > 0.628){
temp[j] = 1
}
}
temp
temp = rep(0, nrow(results_amb))
for(j in 1:nrow(results_amb)){
if(results_amb[j] > 0.63){
temp[j] = 1
}
}
temp
y_amb = train.ambrosia[c("y")]
X_amb = data.matrix(train.ambrosia[, -which(names(train.ambrosia) %in% c("y"))])
theta_amb_initial <- matrix(rep(0, ncol(X_amb)), nrow = ncol(X_amb), ncol = 1)
#theta = gradient(X_amb, y_amb, theta_amb_initial, alpha, 1500)
m = nrow(X_amb)
for(i in 1:15000){
temp = (t(X_amb %*% theta_amb_initial - y_amb) %*% X_amb / m)
theta_amb_initial = theta_amb_initial - alpha * t(temp)
}
X_amb_test = data.matrix(test.ambrosia[, -which(names(test.ambrosia) %in% c("y"))])
results_amb = 1 / (1 + exp(-1 * X_amb_test %*% theta_amb_initial))
results_amb
temp = rep(0, nrow(results_amb))
for(j in 1:nrow(results_amb)){
if(results_amb[j] > 0.63){
temp[j] = 1
}
}
temp
temp = rep(0, nrow(results_amb))
for(j in 1:nrow(results_amb)){
if(results_amb[j] > 0.65){
temp[j] = 1
}
}
temp
temp = rep(0, nrow(results_amb))
for(j in 1:nrow(results_amb)){
if(results_amb[j] > 0.62){
temp[j] = 1
}
}
temp
install.packages('e1071')
library(e1071)
svm.model < svm(Type ~ ., data = train.ambrosia, t, cost = 100, gamma = 1)
svm.model <- svm(Type ~ ., data = train.ambrosia, t, cost = 100, gamma = 1)
svm.model <- svm(Y ~ X, data = train.ambrosia, t, cost = 100, gamma = 1)
svm.model <- svm("Y ~ X", data = train.ambrosia, t, cost = 100, gamma = 1)
svm.model <- svm(formula, data = train.ambrosia, t, cost = 100, gamma = 1)
svm.model <- svm(formula, data = train.ambrosia, cost = 100, gamma = 1)
typeof(train.ambrosia)
svm.model <- svm(churn ~ . , data = train.ambrosia, cost = 100, gamma = 1)
svm.model <- svm(X_amb ~ y_amb , data = X_amb, cost = 100, gamma = 1)
svm.model <- svm(formula , data = X_amb, cost = 100, gamma = 1)
typeof(X_amb)
X_amb
y_amb = data.matrix(train.ambrosia[c("y")])
svm.model <- svm(X_amb ~ y_amb , data = X_amb, cost = 100, gamma = 1)
svm.model <- svm(X_amb ~ y_amb , data = X_amb, cost = 100, gamma = 1, scale = TRUE)
svm.model <- svm(y_amb ~ . , data = X_amb, cost = 100, gamma = 1, scale = TRUE)
pred <- predict(svm.model, X_amb_test)
pred
svm.model <- svm(y_amb ~ . , data = X_amb, cost = 100, gamma = 1, scale = TRUE, type="C-classification")
pred <- predict(svm.model, X_amb_test)
pred
svmt=table(pred = svm.pred, true = X_amb_test[, 1])
svmt=table(pred = pred, true = X_amb_test[, 1])
svmt
svm.model <- svm(y_amb ~ . , data = X_amb, cost = 1000, gamma = 1, scale = TRUE, type="C-classification")
pred <- predict(svm.model, X_amb_test)
pred
svm.model <- svm(y_amb ~ . , data = X_amb, cost = 100, gamma = 0.1, scale = TRUE, type="C-classification")
pred <- predict(svm.model, X_amb_test)
pred
svm.model <- svm(y_amb ~ . , data = X_amb, cost = 100, gamma = 0.01, scale = TRUE, type="C-classification")
pred <- predict(svm.model, X_amb_test)
pred
svm.model <- svm(y_amb ~ . , data = X_amb, cost = 100, gamma = 0.1, scale = TRUE, type="C-classification")
plot.svm(svm.model)
svm.model <- svm(y_amb ~ X_amb , data = X_amb, cost = 100, gamma = 0.1, scale = TRUE, type="C-classification")
pred <- predict(svm.model, X_amb_test)
pred
svm.model <- svm(y_amb ~ . , data = X_amb, cost = 100, gamma = 0.1, scale = TRUE, type="C-classification")
pred <- predict(svm.model, X_amb_test)
pred
install.packages('neuralnet')
library("neuralnet")
ann.model <- neuralnet(y_amb~.,X_amb, hidden=10, threshold=0.01)
ann.model <- neuralnet(y_amb~X_amb,X_amb, hidden=10, threshold=0.01)
ann.model <- neuralnet(y_amb~X_amb,X_amb, hidden=2, threshold=0.01)
ann.model <- neuralnet(y_amb~X_amb,X_amb, hidden=22, threshold=0.01)
ann.model <- neuralnet(y_amb~X_amb,X_amb, hidden=23, threshold=0.01)
ann.model <- neuralnet(y_amb~X_amb,X_amb, hidden=24, threshold=0.01)
ann.model <- neuralnet(y_amb~X_amb,X_amb, hidden=21, threshold=0.01)
ann.model <- neuralnet(y_amb~Bio_1+Bio_2+Bio_3+Bio_4+Bio_5+Bio_6+Bio_7+Bio_8+Bio_9+Bio_10+Bio_11+Bio_12+Bio_13+Bio_14+Bio_15+Bio_16+Bio_17+Bio_18+Bio_19+EKSPOZICIJ+NDM__M_+NAGIB_TERE,X_amb, hidden=21, threshold=0.01)
ann.model <- neuralnet(y_amb~Bio_1+Bio_2+Bio_3+Bio_4+Bio_5+Bio_6+Bio_7+Bio_8+Bio_9+Bio_10+Bio_11+Bio_12+Bio_13+Bio_14+Bio_15+Bio_16+Bio_17+Bio_18+Bio_19+EKSPOZICIJ+NDM__M_+NAGIB_TERE,X_amb, hidden=10, threshold=0.01)
ann.model <- neuralnet(y_amb~Bio_1+Bio_2+Bio_3+Bio_4+Bio_5+Bio_6+Bio_7+Bio_8+Bio_9+Bio_10+Bio_11+Bio_12+Bio_13+Bio_14+Bio_15+Bio_16+Bio_17+Bio_18+Bio_19+EKSPOZICIJ+NDM__M_+NAGIB_TERE,X_amb, hidden=2, threshold=0.01)
ann.result <- compute(ann.model, X_amb_test)
ann.result
str(ann.result)
str(ann.result$neurons)
ann.pred <- prediction(X_amb_test)
ann.pred <- prediction(X_amb_test, list.glm = NULL)
ann.pred <- prediction(ann.model, list.glm = NULL)
install.packages('nnet')
seedsANN = nnet(X_amb, y_amb, size=10, softmax=TRUE)
library(nnet)
seedsANN = nnet(X_amb, y_amb, size=10, softmax=TRUE)
seedsANN = nnet(X_amb, y_amb, size=10, softmax=FALSE)
predict(seedsANN, X_amb_test, type="class")
seedsANN = nnet(y_amb~., X_amb, size=10, rang = 0.5, maxit = 100)
predict(seedsANN, X_amb_test, type="class")
X_amb_test
predict(seedsANN, X_amb_test, type="class")
y_amb
predict(seedsANN, X_amb_test, type="class")
predict(seedsANN, X_amb, type="class")
predict(seedsANN, y_amb, type="class")
predict(seedsANN, X_amb, type="class")
seedsANN = nnet(y_amb~., X_amb, size=2, rang = 0.5, maxit = 100)
predict(seedsANN, X_amb, type="class")
seedsANN = nnet(y_amb~., X_amb, size=24, rang = 0.5, maxit = 100)
predict(seedsANN, X_amb, type="class")
seedsANN = nnet(y_amb~., X_amb, size=23, rang = 0.5, maxit = 100)
predict(seedsANN, X_amb, type="class")
predict(seedsANN, X_amb, type="raw")
predict(seedsANN, X_amb_test, type="raw")
install.packages('maxent')
library(maxent)
mxent.model <- maxent(X_amb, y_amb)
maxent.result <- predict.maxent(mxent.model, X_amb_test)
maxent.result
install.packages('rpart')
library(rpart)
dt.model = rpart(y_amb ~ Bio_1+Bio_2+Bio_3+Bio_4+Bio_5+Bio_6+Bio_7+Bio_8+Bio_9+Bio_10+Bio_11+Bio_12+Bio_13+Bio_14+Bio_15+Bio_16+Bio_17+Bio_18+Bio_19+EKSPOZICIJ+NDM__M_+NAGIB_TERE,X_amb,method="class",control=rpart.control(minsplit=30, cp=0.001))
dt.model = rpart(y_amb_df ~ Bio_1+Bio_2+Bio_3+Bio_4+Bio_5+Bio_6+Bio_7+Bio_8+Bio_9+Bio_10+Bio_11+Bio_12+Bio_13+Bio_14+Bio_15+Bio_16+Bio_17+Bio_18+Bio_19+EKSPOZICIJ+NDM__M_+NAGIB_TERE,X_amb_df,method="class",control=rpart.control(minsplit=30, cp=0.001))
X_amb_df = train.ambrosia[, -which(names(train.ambrosia) %in% c("y"))]
y_amb_df = train.ambrosia[c("y")]
dt.model = rpart(y_amb_df ~ Bio_1+Bio_2+Bio_3+Bio_4+Bio_5+Bio_6+Bio_7+Bio_8+Bio_9+Bio_10+Bio_11+Bio_12+Bio_13+Bio_14+Bio_15+Bio_16+Bio_17+Bio_18+Bio_19+EKSPOZICIJ+NDM__M_+NAGIB_TERE,X_amb_df,method="class",control=rpart.control(minsplit=30, cp=0.001))
y_amb_df = data.frame(data.matrix(train.ambrosia[c("y")]))
X_amb_df = data.frame(train.ambrosia[, -which(names(train.ambrosia) %in% c("y"))])
dt.model = rpart(y_amb_df ~ Bio_1+Bio_2+Bio_3+Bio_4+Bio_5+Bio_6+Bio_7+Bio_8+Bio_9+Bio_10+Bio_11+Bio_12+Bio_13+Bio_14+Bio_15+Bio_16+Bio_17+Bio_18+Bio_19+EKSPOZICIJ+NDM__M_+NAGIB_TERE,X_amb_df,method="class",control=rpart.control(minsplit=30, cp=0.001))
install.packages('party')
library(party)
TreeModel = ctree(y_amb~Bio_1+Bio_2+Bio_3+Bio_4+Bio_5+Bio_6+Bio_7+Bio_8+Bio_9+Bio_10+Bio_11+Bio_12+Bio_13+Bio_14+Bio_15+Bio_16+Bio_17+Bio_18+Bio_19+EKSPOZICIJ+NDM__M_+NAGIB_TERE, X_amb)
y_amb_df = data.frame(data.matrix(train.ambrosia[c("y")]))
X_amb_df = data.frame(data.matrix(train.ambrosia[, -which(names(train.ambrosia) %in% c("y"))]))
typeof(y_amb_df)
y_amb_df = as.data.frame(data.matrix(train.ambrosia[c("y")]))
X_amb_df = as.data.frame(data.matrix(train.ambrosia[, -which(names(train.ambrosia) %in% c("y"))]))
typeof(y_amb_df)
TreeModel = ctree(y_amb~Bio_1+Bio_2+Bio_3+Bio_4+Bio_5+Bio_6+Bio_7+Bio_8+Bio_9+Bio_10+Bio_11+Bio_12+Bio_13+Bio_14+Bio_15+Bio_16+Bio_17+Bio_18+Bio_19+EKSPOZICIJ+NDM__M_+NAGIB_TERE, X_amb)
y_amb_df = data.matrix(train.ambrosia[c("y")])
X_amb_df = data.matrix(train.ambrosia[, -which(names(train.ambrosia) %in% c("y"))])
typeof(y_amb_df)
TreeModel = ctree(as.data.frame(y_amb)~Bio_1+Bio_2+Bio_3+Bio_4+Bio_5+Bio_6+Bio_7+Bio_8+Bio_9+Bio_10+Bio_11+Bio_12+Bio_13+Bio_14+Bio_15+Bio_16+Bio_17+Bio_18+Bio_19+EKSPOZICIJ+NDM__M_+NAGIB_TERE, as.data.frame(X_amb))
y_amb_df = data.frame.matrix(train.ambrosia[c("y")])
X_amb_df = data.frame.matrix(train.ambrosia[, -which(names(train.ambrosia) %in% c("y"))])
typeof(train.ambrosia[c("y")])
typeof(as.data.fram(train.ambrosia[c("y")]))
typeof(as.data.frame(train.ambrosia[c("y")]))
typeof(as.data.frame(train.ambrosia[c("y")][1]))
typeof(as.data.frame(train.ambrosia[c("y")][1,]))
names(x)(as.data.frame(train.ambrosia[c("y")][1,]))
names(as.data.frame(train.ambrosia[c("y")][1,]))
names(y_amb_df)
train.ambrosia[, -which(names(train.ambrosia) %in% c("y"))]
names(train.ambrosia[, -which(names(train.ambrosia) %in% c("y"))])
y_amb_df = data.frame(train.ambrosia[c("y")], row.names = NULL, col.names = "y")
names(y_amb_df)
typeof(y_amb_df)
X_amb_df = data.frame(train.ambrosia[, -which(names(train.ambrosia) %in% c("y"))], row.names = NULL, col.names = names(train.ambrosia[, -which(names(train.ambrosia) %in% c("y"))]))
which(names(train.ambrosia) %in% c("y")
y_amb_df = data.frame(train.ambrosia[c("y")], row.names = NULL, col.names = "y")
X_amb_df = data.frame(train.ambrosia[, -which(names(train.ambrosia) %in% c("y"))], row.names = NULL, col.names = "Bio_1+Bio_2+Bio_3+Bio_4+Bio_5+Bio_6+Bio_7+Bio_8+Bio_9+Bio_10+Bio_11+Bio_12+Bio_13+Bio_14+Bio_15+Bio_16+Bio_17+Bio_18+Bio_19+EKSPOZICIJ+NDM__M_+NAGIB_TERE")
typeof(X_amb_df)
TreeModel = ctree(as.data.frame(y_amb)~Bio_1+Bio_2+Bio_3+Bio_4+Bio_5+Bio_6+Bio_7+Bio_8+Bio_9+Bio_10+Bio_11+Bio_12+Bio_13+Bio_14+Bio_15+Bio_16+Bio_17+Bio_18+Bio_19+EKSPOZICIJ+NDM__M_+NAGIB_TERE, as.data.frame(X_amb))
TreeModel = ctree(y_amb~Bio_1+Bio_2+Bio_3+Bio_4+Bio_5+Bio_6+Bio_7+Bio_8+Bio_9+Bio_10+Bio_11+Bio_12+Bio_13+Bio_14+Bio_15+Bio_16+Bio_17+Bio_18+Bio_19+EKSPOZICIJ+NDM__M_+NAGIB_TERE, X_amb)
y_amb_df = data.frame(train.ambrosia[c("y")], row.names = NULL, col.names = "y", stringsAsFactors=F)
X_amb_df = data.frame(train.ambrosia[, -which(names(train.ambrosia) %in% c("y"))], stringsAsFactors=F,row.names = NULL, col.names = "Bio_1+Bio_2+Bio_3+Bio_4+Bio_5+Bio_6+Bio_7+Bio_8+Bio_9+Bio_10+Bio_11+Bio_12+Bio_13+Bio_14+Bio_15+Bio_16+Bio_17+Bio_18+Bio_19+EKSPOZICIJ+NDM__M_+NAGIB_TERE")
typeof(X_amb_df)
TreeModel = ctree(y_amb~Bio_1+Bio_2+Bio_3+Bio_4+Bio_5+Bio_6+Bio_7+Bio_8+Bio_9+Bio_10+Bio_11+Bio_12+Bio_13+Bio_14+Bio_15+Bio_16+Bio_17+Bio_18+Bio_19+EKSPOZICIJ+NDM__M_+NAGIB_TERE, X_amb)
names(X_amb_df)
TreeModel = ctree(y_amb_df~Bio_1+Bio_2+Bio_3+Bio_4+Bio_5+Bio_6+Bio_7+Bio_8+Bio_9+Bio_10+Bio_11+Bio_12+Bio_13+Bio_14+Bio_15+Bio_16+Bio_17+Bio_18+Bio_19+EKSPOZICIJ+NDM__M_+NAGIB_TERE, cbind(X_amb,y_amb_df))
TreeModel = ctree(y_amb_df~Bio_1+Bio_2+Bio_3+Bio_4+Bio_5+Bio_6+Bio_7+Bio_8+Bio_9+Bio_10+Bio_11+Bio_12+Bio_13+Bio_14+Bio_15+Bio_16+Bio_17+Bio_18+Bio_19+EKSPOZICIJ+NDM__M_+NAGIB_TERE, cbind(y_amb_df,X_amb))
TreeModel = ctree('y_amb_df~Bio_1+Bio_2+Bio_3+Bio_4+Bio_5+Bio_6+Bio_7+Bio_8+Bio_9+Bio_10+Bio_11+Bio_12+Bio_13+Bio_14+Bio_15+Bio_16+Bio_17+Bio_18+Bio_19+EKSPOZICIJ+NDM__M_+NAGIB_TERE', cbind(y_amb_df,X_amb))
dataTree = read.csv("resultFinal2.csv")
dataTree = read.csv("resultFinal2.csv")
dataTree = read.csv("resultFinal2.csv")
dataTree = read.csv("resultFinal2.csv", sep = ';')
typeof(dataTree)
y = rep(1, nrows(dataTree))
dataTree = cbind(dataTree, y)
TreeModel = ctree('y~Bio_1+Bio_2+Bio_3+Bio_4+Bio_5+Bio_6+Bio_7+Bio_8+Bio_9+Bio_10+Bio_11+Bio_12+Bio_13+Bio_14+Bio_15+Bio_16+Bio_17+Bio_18+Bio_19+EKSPOZICIJ+NDM__M_+NAGIB_TERE', dataTree)
dataTree$Id
is.atomic(dataTree)
is.recursive(dataTree)
TreeModel = ctree('y~Bio_1+Bio_2+Bio_3+Bio_4+Bio_5+Bio_6+Bio_7+Bio_8+Bio_9+Bio_10+Bio_11+Bio_12+Bio_13+Bio_14+Bio_15+Bio_16+Bio_17+Bio_18+Bio_19+EKSPOZICIJ+NDM__M_+NAGIB_TERE', dataTree)
install.packages('polspline')
library(polspline)
svinja = polyclass(X_amb)
X_amb
dataTree = cbind(y_amb_df,X_amb)
TreeModel = ctree('y~Bio_1+Bio_2+Bio_3+Bio_4+Bio_5+Bio_6+Bio_7+Bio_8+Bio_9+Bio_10+Bio_11+Bio_12+Bio_13+Bio_14+Bio_15+Bio_16+Bio_17+Bio_18+Bio_19+EKSPOZICIJ+NDM__M_+NAGIB_TERE', dataTree)
dataTree = as.factor(cbind(y_amb_df,X_amb))
TreeModel = ctree('y~Bio_1+Bio_2+Bio_3+Bio_4+Bio_5+Bio_6+Bio_7+Bio_8+Bio_9+Bio_10+Bio_11+Bio_12+Bio_13+Bio_14+Bio_15+Bio_16+Bio_17+Bio_18+Bio_19+EKSPOZICIJ+NDM__M_+NAGIB_TERE', dataTree)
maxCar = apply(carpinus_full[3:24], 2, max)
meanCar = apply(carpinus_full[3:24], 2, mean)
meanMatrixC = do.call(rbind, replicate(nrow(carpinus_full), meanCar, simplify=FALSE))
carp_norm = (carpinus_full[3:24]) / rep(maxCar, each = nrow(carpinus_full))
carp_norm = cbind(carp_norm, carpinus_full[25])
maxFrx = apply(fraxinus_full[3:24], 2, max)
meanFrx = apply(fraxinus_full[3:24], 2, mean)
meanMatrixFx = do.call(rbind, replicate(nrow(fraxinus_full), meanFrx, simplify=FALSE))
frax_norm = (fraxinus_full[3:24]) / rep(maxFrx, each = nrow(fraxinus_full))
frax_norm = cbind(frax_norm, fraxinus_full[25])
maxFag = apply(fagus_full[3:24], 2, max)
meanFag = apply(fagus_full[3:24], 2, mean)
meanMatrixFg = do.call(rbind, replicate(nrow(fagus_full), meanFag, simplify=FALSE))
fag_norm = (fagus_full[3:24]) / rep(maxFag, each = nrow(fagus_full))
fag_norm = cbind(fag_norm, fagus_full[25])
maxQue = apply(quercus_full[3:24], 2, max)
meanQue = apply(quercus_full[3:24], 2, mean)
meanMatrixFx = do.call(rbind, replicate(nrow(quercus_full), meanQue, simplify=FALSE))
que_norm = (quercus_full[3:24]) / rep(maxQue, each = nrow(quercus_full))
que_norm = cbind(que_norm, quercus_full[25])
smp_size = floor(0.75 * nrow(carp_norm))
set.seed(123)
train_indices = sample(seq_len(nrow(carp_norm)), size = smp_size)
train.carp = carp_norm[train_indices,]
test.carp = carp_norm[-train_indices,]
y_car = data.matrix(train.carp[c("y")])
X_car = data.matrix(train.carp[, -which(names(train.carp) %in% c("y"))])
theta_car_initial <- matrix(rep(0, ncol(X_car)), nrow = ncol(X_car), ncol = 1)
mc = nrow(X_car)
for(i in 1:5000){
temp = (t(X_car %*% theta_car_initial - y_car) %*% X_car / m)
theta_car_initial = theta_car_initial - alpha * t(temp)
}
X_car_test = data.matrix(test.carp[, -which(names(test.carp) %in% c("y"))])
results_car = 1 / (1 + exp(-1 * X_amb_test %*% theta_car_initial))
results_car
temp = rep(0, nrow(results_car))
for(j in 1:nrow(results_car)){
if(results_car[j] > 0.63){
temp[j] = 1
}
}
temp
results_y_car = test.carp[, which(names(test.carp) %in% c("y"))]
results_y_car
sum(temp == y_car)
nrow(results_car)
smp_size = floor(0.75 * nrow(carp_norm))
set.seed(123)
train_indices = sample(seq_len(nrow(carp_norm)), size = smp_size)
train.carp = carp_norm[train_indices,]
test.carp = carp_norm[-train_indices,]
y_car = data.matrix(train.carp[c("y")])
X_car = data.matrix(train.carp[, -which(names(train.carp) %in% c("y"))])
theta_car_initial <- matrix(rep(0, ncol(X_car)), nrow = ncol(X_car), ncol = 1)
mc = nrow(X_car)
for(i in 1:5000){
temp = (t(X_car %*% theta_car_initial - y_car) %*% X_car / mc)
theta_car_initial = theta_car_initial - alpha * t(temp)
}
theta_car_initial <- matrix(rep(0, ncol(X_car)), nrow = ncol(X_car), ncol = 1)
mc = nrow(X_car)
for(i in 1:5000){
temp = (t(X_car %*% theta_car_initial - y_car) %*% X_car / mc)
theta_car_initial = theta_car_initial - alpha * t(temp)
}
X_car_test = data.matrix(test.carp[, -which(names(test.carp) %in% c("y"))])
results_car = 1 / (1 + exp(-1 * X_car_test %*% theta_car_initial))
results_car
nrow(results_car)
temp = rep(0, nrow(results_car))
for(j in 1:nrow(results_car)){
if(results_car[j] > 0.63){
temp[j] = 1
}
}
temp
results_y_car = test.carp[, which(names(test.carp) %in% c("y"))]
results_y_car
sum(temp == y_car)
sum(temp == results_y_car)
#install.packages('e1071')
library(e1071)
X_car
svm.modelC <- svm(y_car ~ . , data = X_car, cost = 100, gamma = 0.1, scale = TRUE, type="C-classification")
predC <- predict(svm.modelC, X_car_test)
predC
#install.packages('nnet')
library(nnet)
seedsANNC = nnet(y_car~., X_car, size=23, rang = 0.5, maxit = 100)
predict(seedsANNC, X_car_test, type="raw")
library(nnet)
seedsANNC = nnet(y_car~., X_car, size=23, rang = 0.5, maxit = 1000)
predict(seedsANNC, X_car_test, type="raw")
library(nnet)
seedsANNC = nnet(y_car~., X_car, size=23, rang = 0.05, maxit = 1000)
predict(seedsANNC, X_car_test, type="raw")
library(nnet)
seedsANNC = nnet(y_car~., X_car, size=23, rang = 5, maxit = 1000)
predict(seedsANNC, X_car_test, type="raw")
### MAXENT
count = 0
for(i in nrows(jok)){
if(round(jok[i]) != results_y_car[i] ){
count = count + 1
}
}
count
count = 0
for(i in nrow(jok)){
if(round(jok[i]) != results_y_car[i] ){
count = count + 1
}
}
count
jok = predict(seedsANNC, X_car_test, type="raw")
count = 0
for(i in nrow(jok)){
if(round(jok[i]) != results_y_car[i] ){
count = count + 1
}
}
count
jok = round(predict(seedsANNC, X_car_test, type="raw"))
jok
results_y_car
results_y_car[1346]
jok[1346]
count = 0
for(i in nrow(jok)){
if(jok[i] != results_y_car[i] ){
count = count + 1
}
}
count
jok == results_y_car
sum(jok == results_y_car)
mxent.modelC <- maxent(X_car, y_car)
maxent.resultC <- predict.maxent(mxent.modelC, X_car_test)
maxent.resultC
sum(maxent.resultC == results_y_car)
smp_size = floor(0.75 * nrow(frax_norm))
set.seed(123)
train_indices = sample(seq_len(nrow(frax_norm)), size = smp_size)
train.frax = frax_norm[train_indices,]
test.frax = frax_norm[-train_indices,]
y_frx = data.matrix(train.frax[c("y")])
X_frx = data.matrix(train.frax[, -which(names(train.frax) %in% c("y"))])
theta_frx_initial <- matrix(rep(0, ncol(X_frx)), nrow = ncol(X_frx), ncol = 1)
#theta = gradient(X_amb, y_amb, theta_amb_initial, alpha, 1500)
mc = nrow(X_frx)
for(i in 1:5000){
temp = (t(X_frx %*% theta_frx_initial - y_frx) %*% X_frx / mc)
theta_frx_initial = theta_frx_initial - alpha * t(temp)
}
X_frx_test = data.matrix(test.frax[, -which(names(test.frax) %in% c("y"))])
results_frx = 1 / (1 + exp(-1 * X_frx_test %*% theta_frx_initial))
results_frx
nrow(results_frx)
temp = rep(0, nrow(results_frx))
for(j in 1:nrow(results_frx)){
if(results_frx[j] > 0.63){
temp[j] = 1
}
}
temp
results_y_frx = test.frx[, which(names(test.frax) %in% c("y"))]
results_y_frx
sum(temp == results_y_frx)
results_y_frx = test.frax[, which(names(test.frax) %in% c("y"))]
results_y_frx
sum(temp == results_y_frx)
X_frx
svm.modelFx <- svm(y_frx ~ . , data = X_frx, cost = 100, gamma = 0.1, scale = TRUE, type="C-classification")
predC <- predict(svm.modelC, X_frx_test)
predC
sum(predC == results_y_frx)
svm.modelFx <- svm(y_frx ~ . , data = X_frx, cost = 100, gamma = 0.01, scale = TRUE, type="C-classification")
predC <- predict(svm.modelC, X_frx_test)
sum(predC == results_y_frx)
svm.modelFx <- svm(y_frx ~ . , data = X_frx, cost = 1000, gamma = 0.01, scale = TRUE, type="C-classification")
predC <- predict(svm.modelC, X_frx_test)
sum(predC == results_y_frx)
seedsANNC = nnet(y_frx~., X_frx, size=23, rang = 5, maxit = 1000)
jok = round(predict(seedsANNC, X_frx_test, type="raw"))
sum(jok == results_y_frx)
mxent.modelC <- maxent(X_frx, y_frx)
maxent.resultC <- predict.maxent(mxent.modelC, X_frx_test)
maxent.resultC
sum(maxent.resultC == results_y_car)
mxent.modelC <- maxent(X_frx, y_frx)
maxent.resultC <- predict.maxent(mxent.modelC, X_frx_test)
maxent.resultC
sum(maxent.resultC == results_y_frx)
smp_size = floor(0.75 * nrow(fag_norm))
set.seed(123)
train_indices = sample(seq_len(nrow(fag_norm)), size = smp_size)
train.fag = fag_norm[train_indices,]
test.fag = fag_norm[-train_indices,]
y_fag = data.matrix(train.fag[c("y")])
X_fag = data.matrix(train.fag[, -which(names(train.fag) %in% c("y"))])
theta_fag_initial <- matrix(rep(0, ncol(X_fag)), nrow = ncol(X_fag), ncol = 1)
#theta = gradient(X_amb, y_amb, theta_amb_initial, alpha, 1500)
mc = nrow(X_fag)
for(i in 1:5000){
temp = (t(X_fag %*% theta_fag_initial - y_fag) %*% X_fag / mc)
theta_fag_initial = theta_fag_initial - alpha * t(temp)
}
X_fag_test = data.matrix(test.fag[, -which(names(test.fag) %in% c("y"))])
results_fag = 1 / (1 + exp(-1 * X_fag_test %*% theta_fag_initial))
results_fag
nrow(results_fag)
temp = rep(0, nrow(results_fag))
for(j in 1:nrow(results_fag)){
if(results_fag[j] > 0.63){
temp[j] = 1
}
}
temp
results_y_fag = test.fag[, which(names(test.fag) %in% c("y"))]
results_y_fag
sum(temp == results_y_fag)
temp = rep(0, nrow(results_fag))
for(j in 1:nrow(results_fag)){
if(results_fag[j] > 0.68){
temp[j] = 1
}
}
temp
results_y_fag = test.fag[, which(names(test.fag) %in% c("y"))]
results_y_fag
sum(temp == results_y_fag)
#install.packages('e1071')
library(e1071)
X_frx
svm.modelFx <- svm(y_frx ~ . , data = X_frx, cost = 1000, gamma = 0.01, scale = TRUE, type="C-classification")
predC <- predict(svm.modelC, X_frx_test)
sum(predC == results_y_frx)
temp
temp = rep(0, nrow(results_fag))
for(j in 1:nrow(results_fag)){
if(results_fag[j] > 0.63){
temp[j] = 1
}
}
temp
#install.packages('e1071')
library(e1071)
X_fag
svm.modelFg <- svm(y_fag ~ . , data = X_fag, cost = 1000, gamma = 0.01, scale = TRUE, type="C-classification")
predC <- predict(svm.modelFg, X_fag_test)
sum(predC == results_y_fag)
svm.modelFg <- svm(y_fag ~ . , data = X_fag, cost = 100, gamma = 0.1, scale = TRUE, type="C-classification")
predC <- predict(svm.modelFg, X_fag_test)
sum(predC == results_y_fag)
seedsANNC = nnet(y_fag~., X_fag, size=23, rang = 5, maxit = 1000)
jok = round(predict(seedsANNC, X_fag_test, type="raw"))
sum(jok == results_y_fag)
mxent.modelC <- maxent(X_fag, y_fag)
maxent.resultC <- predict.maxent(mxent.modelC, X_fag_test)
maxent.resultC
sum(maxent.resultC == results_y_fag)
smp_size = floor(0.75 * nrow(que_norm))
set.seed(123)
train_indices = sample(seq_len(nrow(que_norm)), size = smp_size)
train.q = que_norm[train_indices,]
test.q = que_norm[-train_indices,]
y_q = data.matrix(train.q[c("y")])
X_q = data.matrix(train.q[, -which(names(train.q) %in% c("y"))])
theta_q_initial <- matrix(rep(0, ncol(X_q)), nrow = ncol(X_q), ncol = 1)
#theta = gradient(X_amb, y_amb, theta_amb_initial, alpha, 1500)
mc = nrow(X_q)
for(i in 1:5000){
temp = (t(X_q %*% theta_q_initial - y_q) %*% X_q / mc)
theta_q_initial = theta_q_initial - alpha * t(temp)
}
X_q_test = data.matrix(test.q[, -which(names(test.q) %in% c("y"))])
results_q = 1 / (1 + exp(-1 * X_q_test %*% theta_q_initial))
results_q
nrow(results_q)
temp = rep(0, nrow(results_q))
for(j in 1:nrow(results_q)){
if(results_q[j] > 0.63){
temp[j] = 1
}
}
temp
results_y_q = test.q[, which(names(test.q) %in% c("y"))]
results_y_q
sum(temp == results_y_q)
svm.modelq <- svm(y_q ~ . , data = X_q, cost = 100, gamma = 0.1, scale = TRUE, type="C-classification")
predC <- predict(svm.modelq, X_q_test)
sum(predC == results_y_q)
seedsANNC = nnet(y_q~., X_q, size=23, rang = 5, maxit = 1000)
jok = round(predict(seedsANNC, X_q_test, type="raw"))
sum(jok == results_y_q)
mxent.modelC <- maxent(X_q, y_q)
maxent.resultC <- predict.maxent(mxent.modelC, X_q_test)
maxent.resultC
sum(maxent.resultC == results_y_q)
